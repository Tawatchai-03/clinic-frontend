// src/pages/Profile.jsx
import { useEffect, useMemo, useRef, useState } from "react";
import "./Profile.css";

export default function Profile() {
  // ‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å localStorage ‡∏´‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô (‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏î‡∏¢ /api/login)
  const auth = useMemo(() => {
    try { return JSON.parse(localStorage.getItem("auth_user") || "{}"); }
    catch { return {}; }
  }, []);
  const userId = auth?.id;
  const role = (auth?.role === "doctor") ? "doctor" : "patient"; // fallback
  const API = (import.meta.env.VITE_API_URL || "").replace(/\/+$/, "");

  const [tab, setTab] = useState("info");
  const [data, setData] = useState(null);        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡πá‡∏Å‡πÄ‡∏≠‡∏ô‡∏î‡πå
  const [serverRole, setServerRole] = useState(null); // ‡πÉ‡∏ä‡πâ role ‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡πá‡∏Å‡πÄ‡∏≠‡∏ô‡∏î‡πå‡∏™‡πà‡∏á‡∏°‡∏≤
  const [saving, setSaving] = useState(false);
  const [toast, setToast] = useState("");
  const [specialties, setSpecialties] = useState([]);
  const fileRef = useRef(null);

  // ---------- state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
  const [pw, setPw] = useState({ current: "", next: "", confirm: "" });
  const [savingPw, setSavingPw] = useState(false);
  const onPwChange = (k) => (e) => setPw((p) => ({ ...p, [k]: e.target.value }));

  // ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á
  useEffect(() => {
    if (!userId) return;
    (async () => {
      const res = await fetch(`${API}/api/users/${userId}`);
      if (!res.ok) throw new Error(`load profile failed (${res.status})`);
      const json = await res.json();

      // ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ birthDate ‡πÄ‡∏õ‡πá‡∏ô "YYYY-MM-DD" ‡πÄ‡∏™‡∏°‡∏≠ (‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ISO/UTC)
      const normalized = {
        ...json,
        birthDate: (json.birthDate || json.birth_date || "").slice(0, 10),
      };

      setData(normalized);
      setServerRole(normalized.role || role);
    })().catch(console.error);
  }, [API, userId, role]);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏°‡∏≠
  useEffect(() => {
    if (serverRole !== "doctor") return;
    (async () => {
      const r = await fetch(`${API}/api/specialties`);
      if (!r.ok) throw new Error("load specialties failed");
      const sp = await r.json();
      setSpecialties(Array.isArray(sp) ? sp : []);
    })().catch(console.error);
  }, [API, serverRole]);

  const onChange = (key, nested = false) => (e) => {
    const v = e.target.value;
    setData((d) => {
      if (!d) return d;
      if (!nested) return { ...d, [key]: v };
      return { ...d, address: { ...d.address, [key]: v } };
    });
  };

  const save = async (e) => {
    e.preventDefault();
    if (!data || !userId) return;

    let payload;
    if (serverRole === "patient") {
      if (data.address?.postalCode && !/^\d{5}$/.test(data.address.postalCode)) {
        alert("‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 5 ‡∏´‡∏•‡∏±‡∏Å");
        return;
      }
      payload = {
        role: "patient",
        firstName: data.firstName,
        lastName: data.lastName,
        phone: data.phone,
        // ‚ùå ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á birthDate (‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ)
        address: {
          line1: data.address?.line1 || "",
          district: data.address?.district || "",
          province: data.address?.province || "",
          postalCode: data.address?.postalCode || "",
        },
      };
    } else {
      // ‡πÅ‡∏û‡∏ó‡∏¢‡πå
      if (!data.specialtyId) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç");
        return;
      }
      payload = {
        role: "doctor",
        firstName: data.firstName,
        lastName: data.lastName,
        phone: data.phone,
        specialtyId: Number(data.specialtyId),
      };
    }

    try {
      setSaving(true);
      const res = await fetch(`${API}/api/users/${userId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      if (!res.ok) throw new Error("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
      setToast("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      setTimeout(() => setToast(""), 1800);
    } catch (err) {
      console.error(err);
      alert(err.message || "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    } finally {
      setSaving(false);
    }
  };

  // ---------- ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ----------
  async function changePassword(e) {
    e.preventDefault();
    if (!userId) return;

    if (!pw.current || !pw.next || !pw.confirm) {
      return alert("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
    }
    if (pw.next.length < 8) {
      return alert("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£");
    }
    if (pw.next !== pw.confirm) {
      return alert("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô");
    }
    if (pw.current === pw.next) {
      return alert("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô");
    }

    try {
      setSavingPw(true);
      const r = await fetch(`${API}/api/users/${userId}/password`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          currentPassword: pw.current,
          newPassword: pw.next,
        }),
      });
      const js = await r.json().catch(() => ({}));
      if (!r.ok) throw new Error(js?.message || "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

      setToast("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      setPw({ current: "", next: "", confirm: "" });
      setTimeout(() => setToast(""), 1800);
    } catch (err) {
      console.error(err);
      alert(err.message || "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setSavingPw(false);
    }
  }

  if (!data || !serverRole) {
    return <div className="profile" style={{ padding: 32 }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‚Ä¶</div>;
  }

  return (
    <div className="profile">
      <div className="profile__container">
        {/* ‡∏ã‡πâ‡∏≤‡∏¢ */}
        <aside className="profile__left">
          <div className="profile__hero">
            <h2>‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h2>
            <p>‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ</p>
            {serverRole === "doctor" && <p>‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚Äú‡∏™‡∏≤‡∏Ç‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‚Äù ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</p>}
          </div>
        </aside>

        {/* ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å */}
        <section className="profile__main">
          <div className="profile__tabs">
            <button className={`tab ${tab==="info" ? "is-active" : ""}`} onClick={() => setTab("info")}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</button>
            <button className={`tab ${tab==="security" ? "is-active" : ""}`} onClick={() => setTab("security")}>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</button>
          </div>

          {tab === "info" ? (
            <form className="card" onSubmit={save}>
              <div className="profile__header">
                <div className="avatar">
                  <img
                    src={`https://api.dicebear.com/7.x/initials/svg?seed=${encodeURIComponent(`${data.firstName||""} ${data.lastName||""}`)}`}
                    alt="avatar"
                  />
                  <div className="avatar__actions">
                    <button type="button" className="btn btn--ghost" onClick={() => fileRef.current?.click()} disabled>
                      ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ
                    </button>
                    <input ref={fileRef} type="file" hidden />
                  </div>
                </div>

                <div className="who">
                  <div className="role">
                    ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: <span className="role__badge">{serverRole === "doctor" ? "‡πÅ‡∏û‡∏ó‡∏¢‡πå" : "‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ"}</span>
                  </div>
                  <h3>{data.firstName} {data.lastName}</h3>
                  <div className="muted">{data.email}</div>
                </div>
              </div>

              <div className="grid grid--2">
                <div className="form-group">
                  <label>‡∏ä‡∏∑‡πà‡∏≠</label>
                  <input value={data.firstName || ""} onChange={onChange("firstName")} required />
                </div>
                <div className="form-group">
                  <label>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
                  <input value={data.lastName || ""} onChange={onChange("lastName")} required />
                </div>

                <div className="form-group">
                  <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
                  <input value={data.email || ""} readOnly />
                </div>
                <div className="form-group">
                  <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</label>
                  <input value={data.phone || ""} onChange={onChange("phone")} />
                </div>

                {serverRole === "patient" && (
                  <>
                    <div className="form-group">
                      <label>‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î</label>
                      {/* üîí ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å DB (string) ‡πÅ‡∏•‡∏∞‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ */}
                      <input
                        type="text"
                        value={(data.birthDate || "").slice(0, 10)}
                        readOnly
                      />
                    </div>
                    <div className="form-group">
                      <label>‡πÄ‡∏û‡∏®</label>
                      <select value={data.gender || ""} disabled>
                        <option value="">‚Äî ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏® ‚Äî</option>
                        <option value="male">‡∏ä‡∏≤‡∏¢</option>
                        <option value="female">‡∏´‡∏ç‡∏¥‡∏á</option>
                      </select>
                    </div>

                    <div className="form-group">
                      <label>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</label>
                      <input value={data.address?.line1 || ""} onChange={onChange("line1", true)} />
                    </div>
                    <div className="form-group">
                      <label>‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠</label>
                      <input value={data.address?.district || ""} onChange={onChange("district", true)} />
                    </div>
                    <div className="form-group">
                      <label>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</label>
                      <input value={data.address?.province || ""} onChange={onChange("province", true)} />
                    </div>
                    <div className="form-group">
                      <label>‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå</label>
                      <input inputMode="numeric" pattern="\d{5}" value={data.address?.postalCode || ""} onChange={onChange("postalCode", true)} />
                    </div>
                  </>
                )}

                {serverRole === "doctor" && (
                  <div className="form-group full">
                    <label>‡∏™‡∏≤‡∏Ç‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç</label>
                    <select value={data.specialtyId || ""} onChange={onChange("specialtyId")} required>
                      <option value="">‚Äî ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ ‚Äî</option>
                      {specialties.map((sp) => (
                        <option key={sp.id} value={sp.id}>
                          {sp.name_th || sp.code}
                        </option>
                      ))}
                    </select>
                  </div>
                )}
              </div>

              <div className="actions">
                <button className="btn btn--primary" disabled={saving}>
                  {saving ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"}
                </button>
              </div>
            </form>
          ) : (
            <form className="card" onSubmit={changePassword}>
              <h3 className="card__title">‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</h3>
              <div className="grid grid--2">
                <div className="form-group full">
                  <label>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</label>
                  <input
                    type="password"
                    value={pw.current}
                    onChange={onPwChange("current")}
                    placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                    required
                  />
                </div>
                <div className="form-group">
                  <label>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</label>
                  <input
                    type="password"
                    value={pw.next}
                    onChange={onPwChange("next")}
                    placeholder="‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"
                    required
                  />
                </div>
                <div className="form-group">
                  <label>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</label>
                  <input
                    type="password"
                    value={pw.confirm}
                    onChange={onPwChange("confirm")}
                    placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
                    required
                  />
                </div>
              </div>
              <div className="actions">
                <button className="btn btn--primary" disabled={savingPw}>
                  {savingPw ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"}
                </button>
              </div>
              <p className="muted" style={{marginTop: 8}}>
                ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ú‡∏™‡∏°‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å/‡πÉ‡∏´‡∏ç‡πà ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
              </p>
            </form>
          )}
        </section>

        {/* ‡∏Ç‡∏ß‡∏≤ */}
        <aside className="profile__right">
          <div className="profile__tip">
            <h4>‡∏•‡∏±‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á</h4>
            <ul>
              {serverRole === "patient" && (
                <>
                  <li><a href="/search">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå</a></li>
                  <li><a href="/my-appointments">‡∏ô‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</a></li>
                </>
              )}
              {serverRole === "doctor" && <li><a href="/doctor">‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</a></li>}
            </ul>
          </div>
        </aside>
      </div>

      {toast && <div className="toast">{toast}</div>}
    </div>
  );
}
